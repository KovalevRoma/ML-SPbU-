from random import randint
import numpy as np

y1 = 1.1


def copy(y, y0, st, fi):
    global y1
    if y0 > y[fi]:
        y1 = fi + 1
    elif y0 < y[st]:
        y1 = 0
    elif y0 == y[(st + fi) // 2] or y0 == y[st] or y0 == y[fi]:
        y1 = -1
    elif int((st + fi) // 2) == st:
        y1 = fi
    elif y0 > y[int((st + fi) // 2)]:
        copy(y, y0, int((st + fi) // 2), fi)
    else:
        copy(y, y0, st, int((st + fi) // 2))


def hum_(y, y0, st, fi):
    global y1
    if y0 == y[(st + fi) // 2]:
        y1 = float((st + fi) // 2)
    elif (st + fi) // 2 == st:
        y1 = float(st) + 0.5
    elif y0 > y[(st + fi) // 2]:
        hum_(y, y0, int((st + fi) // 2), fi)
    else:
        hum_(y, y0, st, int((st + fi) // 2))


def quicksort(nums, fst, lst):
    if fst >= lst:
        return
    (i, j) = (fst, lst)
    pivot = nums[randint(fst, lst)]

    while i <= j:
        while nums[i] < pivot:
            i += 1
        while nums[j] > pivot:
            j -= 1
        if i <= j:
            (nums[i], nums[j]) = (nums[j], nums[i])
            (i, j) = (i + 1, j - 1)
    quicksort(nums, fst, j)
    quicksort(nums, i, lst)


print("введите количество вертикальных улиц: ")
K = int(input())
print("введите количество горизонтальных улиц: ")
M = int(input())
x = np.empty(K)
y = np.empty(M)
print("введите координату х вертикальных улиц:")
for i in range(0, K):
    x[i] = float(input())
quicksort(x, 0, K - 1)
print("введите координату у горизонтальных улиц:")
for i in range(0, M):
    y[i] = float(input())
quicksort(y, 0, M - 1)
print("введите количество школ:")
s = int(input())
school = [[0] * 2 for q in range(s)]
part = [[0] * (K + 1) for q in range(M + 1)]
for i in range(0, s):
    print("введите координаты", i + 1, "школы:")
    print("введите координату х:")
    school[i][0] = float(input())
    print("введите координату у:")
    school[i][1] = float(input())
    copy(y, school[i][1], 0, len(y) - 1)
    ny = int(y1)
    copy(x, school[i][0], 0, len(x) - 1)
    nx = int(y1)
    if nx != -1 and ny != -1:
        if part[ny][nx] == 0:
            part[ny][nx] = i + 1

datadist = [[1000000] * K for q in range(M)]
datasc = [[-1] * K for q in range(M)]
for i in range(M):
    for j in range(K):
        for k in range(s):
            if abs(school[k][0] - x[j]) + abs(school[k][1] - y[i]) < datadist[i][j]:
                datadist[i][j] = abs(school[k][0] - x[j]) + abs(school[k][1] - y[i])
                datasc[i][j] = k + 1

print("введите количество горожан:")
n = int(input())
for i in range(n):
    print("введите координаты", i + 1, "гражданина:")
    print("введите координату х:")
    x0 = float(input())
    print("введите координату у:")
    y0 = float(input())
    copy(y, y0, 0, len(y) - 1)
    qy = int(y1)
    copy(x, x0, 0, len(x) - 1)
    qx = int(y1)
    if part[qy][qx] != 0:
        print(part[qy][qx])
    elif y0 >= y[len(y) - 1] and x0 >= x[len(x) - 1]:
        print(datasc[len(y) - 1][len(x) - 1])
    elif y0 <= y[0] and x0 <= x[0]:
        print(datasc[0][0])
    elif y0 >= y[len(y) - 1] and x0 <= x[0]:
        print(datasc[len(y) - 1][0])
    elif y0 <= y[0] and x0 >= x[len(x) - 1]:
        print(datasc[0][len(x) - 1])
    elif y0 >= y[len(y) - 1]:
        hum_(x, x0, 0, len(x) - 1)
        qx = y1
        if int(qx) == qx:
            print(datasc[len(y) - 1][int(qx)])
        else:
            if abs(x0 - school[datasc[len(y) - 1][int(qx)] - 1][0]) + abs(
                    y0 - school[datasc[len(y) - 1][int(qx)] - 1][1]) < abs(
                    x0 - school[datasc[len(y) - 1][int(qx) + 1] - 1][0]) + abs(
                    y0 - school[datasc[len(y) - 1][int(qx) + 1] - 1][1]):
                print(datasc[len(y) - 1][int(qx)])
            else:
                print(datasc[len(y) - 1][int(qx) + 1])
    elif y0 <= y[0]:
        hum_(x, x0, 0, len(x) - 1)
        qx = y1
        if int(qx) == qx:
            print(datasc[0][int(qx)])
        else:
            if abs(x0 - school[datasc[0][int(qx)] - 1][0]) + abs(y0 - school[datasc[0][int(qx)] - 1][1]) < abs(
                    x0 - school[datasc[0][int(qx) + 1] - 1][0]) + abs(y0 - school[datasc[0][int(qx) + 1] - 1][1]):
                print(datasc[0][int(qx)])
            else:
                print(datasc[0][int(qx + 1)])
    elif x0 >= x[len(x) - 1]:
        hum_(y, y0, 0, len(y) - 1)
        qy = y1
        if int(qy) == qy:
            print(datasc[int(qy)][len(x) - 1])
        else:
            if abs(x0 - school[datasc[int(qy)][len(x) - 1] - 1][0]) + abs(y0 - school[datasc[int(qy)][len(x) - 1] - 1][1]) < abs(x0 - school[datasc[int(qy + 1)][len(x) - 1] - 1][0]) + abs(y0 - school[datasc[int(qy + 1)][len(x) - 1] - 1][1]):
                print(datasc[int(qy)][len(x) - 1])
            else:
                print(datasc[int(qy + 1)][len(x) - 1])
    elif x0 <= x[0]:
        hum_(y, y0, 0, len(y) - 1)
        qy = y1
        if int(qy) == qy:
            print(datasc[int(qy)][0])
        else:
            if abs(x0 - school[datasc[int(qy)][0] - 1][0]) + abs(y0 - school[datasc[int(qy)][0] - 1][1]) < abs(x0 - school[datasc[int(qy + 1)][0] - 1][0]) + abs(y0 - school[datasc[int(qy + 1)][0] - 1][1]):
                print(datasc[int(qy)][0])
            else:
                print(datasc[int(qy + 1)][0])
    else:
        hum_(y, y0, 0, len(y) - 1)
        qy = y1
        hum_(x, x0, 0, len(x) - 1)
        qx = y1
        if int(qy) == qy and int(qx) == qx:
            print(datasc[int(qy)][int(qx)])
        elif int(qy) == qy:
            if abs(x0 - school[datasc[int(qy)][int(qx)] - 1][0]) + abs(y0 - school[datasc[int(qy)][int(qx)] - 1][1]) < abs(x0 - school[datasc[int(qy)][int(qx + 1)] - 1][0]) + abs(y0 - school[datasc[int(qy)][int(qx + 1)] - 1][1]):
                print(datasc[int(qy)][int(qx)])
            else:
                print(datasc[int(qy)][int(qx + 1)])
        elif int(qx) == qx:
            if abs(x0 - school[datasc[int(qy)][int(qx)] - 1][0]) + abs(y0 - school[datasc[int(qy)][int(qx)] - 1][1]) < abs(x0 - school[datasc[int(qy + 1)][int(qx)] - 1][0]) + abs(y0 - school[datasc[int(qy + 1)][int(qx)] - 1][1]):
                print(datasc[int(qy)][int(qx)])
            else:
                print(datasc[int(qy + 1)][int(qx)])
        else:
            dz1 = abs(x0 - school[datasc[int(qy)][int(qx)] - 1][0]) + abs(y0 - school[datasc[int(qy)][int(qx)] - 1][1])
            dz2 = abs(x0 - school[datasc[int(qy)][int(qx + 1)] - 1][0]) + abs(y0 - school[datasc[int(qy)][int(qx + 1)] - 1][1])
            dz3 = abs(x0 - school[datasc[int(qy + 1)][int(qx + 1)] - 1][0]) + abs(y0 - school[datasc[int(qy + 1)][int(qx + 1)] - 1][1])
            dz4 = abs(x0 - school[datasc[int(qy + 1)][int(qx)] - 1][0]) + abs(y0 - school[datasc[int(qy + 1)][int(qx)] - 1][1])
            if min(dz1, dz2, dz3, dz4) == dz1:
                print(datasc[int(qy)][int(qx)])
            elif min(dz1, dz2, dz3, dz4) == dz2:
                print(datasc[int(qy)][int(qx + 1)])
            elif min(dz1, dz2, dz3, dz4) == dz3:
                print(datasc[int(qy + 1)][int(qx + 1)])
            elif min(dz1, dz2, dz3, dz4) == dz4:
                print(datasc[int(qy + 1)][int(qx)])
